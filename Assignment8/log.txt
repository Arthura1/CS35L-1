Ran: sort --version
-> sort (GNU coreutils) 8.25 
Version is new(2016)

$ od -An -t f -N 80000000 < /dev/urandom | tr -s ' ' '\n' > random.txt
-An: specifies that input offset base should not be written
-t f: specifies that we need double-precision floating point numbers.
-N : specifies bytes of input, double is 8 bytes, so we need 
80,000,000 bytes for 10,000,000 doubles.

The piped tr command replaces spaces with new lines.
Then the output is placed into random.txt

Ran the following commands to time sort with different values
for parallel:

1 thread:
$ time -p sort -g --parallel=1 random.txt > /dev/null
real 188.11
user 187.88
sys 0.23

2 threads:
$ time -p sort -g --parallel=2 random.txt > /dev/null
real 100.72
user 192.39
sys 0.24

3 threads:
$ time -p sort -g --parallel=4 random.txt > /dev/null
real 61.41
user 203.54
sys 0.32

4 threads:
$ time -p sort -g --parallel=8 random.txt > /dev/null
real 47.08
user 268.40
sys 1.93

As the number of threads increase, the speed increases 
and time of execution decreases.

