1)Yes, the resulting network would still be secure because
only encrypted bytes would be visible to the person trying to intercept.
Without the private key, the data cannot be decrypted. Since the private key
was not transferred over the network, the network is secure. 
	
	(1)If the keyboards were tapped, the network would still be secure
	because the key generator creates the private key with random values and not 
	with keyboard inputs. Our team could do a passwordless login to ensure that
	the security is not compromised at the client's end if that computer 
	has its keyboard tapped.
	
	(2)If someone has physical access to the USB from which we're booting up,
	they might be able to see the private key when it is generated. If they can see the
	messages being transferred, they would be able to decrypt it using the private key
	and hence the security is compromized.

2)gpg --verify just verifies that the digital signature of tar file matches.
It does not validate who created the tar file because anyone could have created it
using someone else's name. Since the public-private pair would be generated by some other 
individual, the gpg --verify would give 'good signature'(verifies document integrity)
even though the person who created the file could be an imposter (does not verify origin).
There are two solutions: 
- Take the public key from the person you expect it to be from, physically. 
- A third party, the Certificate Authority (CA) could be used to keep track of the origin
of the public key. A certificate contains the owner's name and signature and thus can verify
the origin.